#ifndef FLOEVISUALIZATION_H
#define FLOEVISUALIZATION_H

#include <vector>

#include <QObject>
#include <QString>
#include <QDebug>
#include <QMetaEnum>

#include <vtkNew.h>
#include <vtkUnstructuredGrid.h>
#include <vtkCellType.h>
#include <vtkDataSetMapper.h>
#include <vtkActor.h>
#include <vtkProperty.h>
#include <vtkNamedColors.h>
#include <vtkDoubleArray.h>
#include <vtkIntArray.h>
#include <vtkPolyDataMapper.h>
#include <vtkDataSetMapper.h>
#include <vtkLookupTable.h>
#include <vtkPolyData.h>
#include <vtkPolyDataMapper.h>
#include <vtkPolyLine.h>
#include <vtkPointData.h>
#include <vtkCellArray.h>

#include <vtkLabeledDataMapper.h>
#include <vtkActor2D.h>
#include <vtkProperty2D.h>
#include <vtkMutableUndirectedGraph.h>
#include <vtkCellData.h>
#include <vtkUnstructuredGridGeometryFilter.h>
#include <vtkIdFilter.h>
#include <vtkCellCenters.h>
#include <vtkGlyph3D.h>
#include <vtkArrowSource.h>

#include <vtkStructuredGrid.h>

#include "geometry.h"

namespace icy { class FloeVisualization; class Node; class Element; class Edge;}

class icy::FloeVisualization : public QObject
{
    Q_OBJECT
public:
    FloeVisualization();

    // visualization options
    enum VisOpt { none, boundary, vert_force,
                  fracture_support, max_normal_traction,
                  deflection, AbsMx, Mx, My, Mxy, Mx_e, My_e, Mxy_e, Tx, Ty, Txy, Qx, Qy,
                  stx, sty, stxy, st1, st2, sbx, sby, sbxy, sb1, sb2};
    Q_ENUM(VisOpt)

    // presenting via VTK
    bool use_tentative_coordinates = true;
    bool update_minmax = true;
    bool update_arrows = true;

    vtkNew<vtkNamedColors> colors;
    vtkNew<vtkPoints> points;

    // 2D mesh
    vtkNew<vtkUnstructuredGrid> ugrid;
    vtkNew<vtkCellArray> cellArray;
    vtkNew<vtkDataSetMapper> dataSetMapper;
    vtkNew<vtkActor> actor_mesh;

    // 3D mesh
    vtkNew<vtkPoints> points_mesh3d;
    vtkNew<vtkUnstructuredGrid> ugrid_mesh3d;
    vtkNew<vtkCellArray> cellArray_mesh3d;
    vtkNew<vtkDataSetMapper> mapper_mesh3d;
    vtkNew<vtkActor> actor_mesh_mesh3d;

    // labels
    vtkNew<vtkUnstructuredGrid> ugrid_selection;
    vtkNew<vtkIntArray> edgeNumbers;
    vtkNew<vtkUnstructuredGridGeometryFilter> geometryFilter;
    vtkNew<vtkLabeledDataMapper> labledDataMapper;
    vtkNew<vtkActor2D> actor_labels;
    vtkNew<vtkIdFilter> idfilter;
    vtkNew<vtkCellCenters> cellCenters;

    // boundary
    vtkNew<vtkCellArray> cellArray_boundary;
    vtkNew<vtkUnstructuredGrid> ugrid_boundary;
    vtkNew<vtkDataSetMapper> dataSetMapper_boundary;
    vtkNew<vtkActor> actor_boundary;

    // arrows
    vtkNew<vtkCellArray> cellArray_vertices;
    vtkNew<vtkUnstructuredGrid> ugrid_vertices;
    vtkNew<vtkDoubleArray> arrowCoords;
    vtkNew<vtkArrowSource> arrowSource;
    vtkNew<vtkGlyph3D> glyph3D;
    vtkNew<vtkPolyDataMapper> mapper_arrows;
    vtkNew<vtkActor> actor_arrows;

    // surface
    static constexpr unsigned gridSize = 50;
    vtkNew<vtkStructuredGrid> grid_water;
    vtkNew<vtkPoints> points_water;
    vtkNew<vtkDataSetMapper> mapper_water;
    vtkNew<vtkActor> actor_water;

    // visualizing variables
    vtkNew<vtkDoubleArray> visualized_values;
    vtkIdType selectedPointId = -1;
    // visual representation of the floe with thickness
    void UnsafeUpdateTopology(std::vector<icy::Node*> *nodes, std::vector<icy::Element*> *elems,
                              std::vector<icy::Edge*> *edges);
    void UnsafeUpdateDisplacements(std::vector<icy::Node*> *nodes, std::vector<icy::Element*> *elems);
    void UnsafeUpdateValues(std::vector<icy::Node*> *nodes,
                            std::vector<icy::Element*> *elems,
                            int option = -1);
    void UnsafeUpdateArrows(std::vector<icy::Node*> *nodes);
    void UnsafeUpdateSelection(std::vector<icy::Node*> *nodes,
                               vtkIdType selectedPoint = -1);
    void UnsafeUpdateWaterLine(int mode, double simulationTime);



    // visualization
    VisOpt VisualizingVariable = VisOpt::none;
    vtkNew<vtkLookupTable> hueLut;
    vtkNew<vtkLookupTable> defaultLut;

    void InitializeLUT();

    vtkNew<vtkLookupTable> lutAsymmetry;

    static constexpr float lutArray[257][3] =
    { {0.54938, 0.772213, 0.848103},
      {0.54823, 0.768204, 0.840961},
      {0.547079, 0.764196, 0.833819},
      {0.545929, 0.760187, 0.826677},
      {0.544779, 0.756178, 0.819535},
      {0.543628, 0.75217, 0.812393},
      {0.542478, 0.748161, 0.805251},
      {0.541327, 0.744153, 0.79811},
      {0.540177, 0.740144, 0.790968},
      {0.539027, 0.736135, 0.783826},
      {0.537876, 0.732127, 0.776684},
      {0.536726, 0.728118, 0.769542},
      {0.535576, 0.724109, 0.7624},
      {0.534425, 0.720101, 0.755258},
      {0.533275, 0.716092, 0.748116},
      {0.532125, 0.712083, 0.740974},
      {0.530974, 0.708075, 0.733832},
      {0.529824, 0.704066, 0.72669},
      {0.528674, 0.700057, 0.719548},
      {0.527523, 0.696049, 0.712406},
      {0.526373, 0.69204, 0.705265},
      {0.525222, 0.688032, 0.698123},
      {0.524072, 0.684023, 0.690981},
      {0.522922, 0.680014, 0.683839},
      {0.522977, 0.677455, 0.678459},
      {0.523484, 0.67544, 0.673739},
      {0.523991, 0.673425, 0.66902},
      {0.524498, 0.671409, 0.664301},
      {0.525006, 0.669394, 0.659581},
      {0.525513, 0.667378, 0.654862},
      {0.52602, 0.665363, 0.650142},
      {0.526527, 0.663348, 0.645423},
      {0.527035, 0.661332, 0.640704},
      {0.527542, 0.659317, 0.635984},
      {0.528049, 0.657302, 0.631265},
      {0.528556, 0.655286, 0.626545},
      {0.529063, 0.653271, 0.621826},
      {0.529571, 0.651256, 0.617107},
      {0.530078, 0.64924, 0.612387},
      {0.530585, 0.647225, 0.607668},
      {0.531092, 0.645209, 0.602949},
      {0.531599, 0.643194, 0.598229},
      {0.532107, 0.641179, 0.59351},
      {0.532614, 0.639163, 0.58879},
      {0.533121, 0.637148, 0.584071},
      {0.533628, 0.635133, 0.579352},
      {0.534135, 0.633117, 0.574632},
      {0.53521, 0.631914, 0.570968},
      {0.536966, 0.631685, 0.568571},
      {0.538722, 0.631456, 0.566174},
      {0.540478, 0.631227, 0.563777},
      {0.542234, 0.630999, 0.56138},
      {0.54399, 0.63077, 0.558983},
      {0.545746, 0.630541, 0.556586},
      {0.547502, 0.630312, 0.554189},
      {0.549257, 0.630083, 0.551792},
      {0.551013, 0.629854, 0.549395},
      {0.552769, 0.629625, 0.546998},
      {0.554525, 0.629397, 0.544601},
      {0.556281, 0.629168, 0.542204},
      {0.558037, 0.628939, 0.539807},
      {0.559793, 0.62871, 0.53741},
      {0.561549, 0.628481, 0.535013},
      {0.563305, 0.628252, 0.532616},
      {0.565061, 0.628024, 0.530219},
      {0.566817, 0.627795, 0.527822},
      {0.568573, 0.627566, 0.525425},
      {0.570329, 0.627337, 0.523028},
      {0.572084, 0.627108, 0.520631},
      {0.57384, 0.626879, 0.518234},
      {0.575731, 0.626895, 0.516188},
      {0.578227, 0.628014, 0.51572},
      {0.580724, 0.629133, 0.515252},
      {0.58322, 0.630252, 0.514784},
      {0.585716, 0.631371, 0.514316},
      {0.588212, 0.63249, 0.513848},
      {0.590709, 0.633609, 0.51338},
      {0.593205, 0.634728, 0.512912},
      {0.595701, 0.635847, 0.512444},
      {0.598198, 0.636966, 0.511976},
      {0.600694, 0.638085, 0.511508},
      {0.60319, 0.639204, 0.51104},
      {0.605687, 0.640323, 0.510572},
      {0.608183, 0.641442, 0.510104},
      {0.610679, 0.642561, 0.509636},
      {0.613176, 0.64368, 0.509168},
      {0.615672, 0.644799, 0.5087},
      {0.618168, 0.645918, 0.508232},
      {0.620665, 0.647037, 0.507764},
      {0.623161, 0.648155, 0.507296},
      {0.625657, 0.649274, 0.506828},
      {0.628153, 0.650393, 0.50636},
      {0.63065, 0.651512, 0.505892},
      {0.633146, 0.652631, 0.505424},
      {0.635881, 0.654505, 0.506266},
      {0.638639, 0.656455, 0.507239},
      {0.641397, 0.658404, 0.508212},
      {0.644155, 0.660353, 0.509185},
      {0.646913, 0.662303, 0.510159},
      {0.649672, 0.664252, 0.511132},
      {0.65243, 0.666202, 0.512105},
      {0.655188, 0.668151, 0.513078},
      {0.657947, 0.6701, 0.514052},
      {0.660705, 0.67205, 0.515025},
      {0.663463, 0.673999, 0.515998},
      {0.666221,0.675949, 0.516971},
      {0.66898, 0.677898, 0.517945},
      {0.671738, 0.679847, 0.518918},
      {0.674496, 0.681797, 0.519891},
      {0.677254, 0.683746, 0.520864},
      {0.680013, 0.685696, 0.521838},
      {0.682771, 0.687645, 0.522811},
      {0.685529, 0.689595, 0.523784},
      {0.688287, 0.691544, 0.524757},
      {0.691046, 0.693493, 0.525731},
      {0.693804, 0.695443, 0.526704},
      {0.696562, 0.697392, 0.527677},
      {0.699245, 0.699556, 0.529277},
      {0.701885, 0.701842, 0.531236},
      {0.704526, 0.704128, 0.533194},
      {0.707166, 0.706414, 0.535153},
      {0.709806, 0.7087, 0.537111},
      {0.712447, 0.710987, 0.53907},
      {0.715087, 0.713273, 0.541028},
      {0.717727, 0.715559, 0.542987},
      {0.720368, 0.717845, 0.544945},
      {0.723008, 0.720131, 0.546904},
      {0.725648, 0.722417, 0.548862},
      {0.728289, 0.724704, 0.55082},
      {0.730929, 0.72699, 0.552779},
      {0.733569, 0.729276, 0.554737},
      {0.736209, 0.731562, 0.556696},
      {0.73885, 0.733848, 0.558654},
      {0.74149, 0.736134, 0.560613},
      {0.74413, 0.73842, 0.562571},
      {0.746771, 0.740707, 0.56453},
      {0.749411, 0.742993, 0.566488},
      {0.752051, 0.745279, 0.568447},
      {0.754692, 0.747565, 0.570405},
      {0.757332, 0.749851, 0.572364},
      {0.759836, 0.752111, 0.574548},
      {0.762101, 0.754326, 0.577127},
      {0.764366, 0.75654, 0.579707},
      {0.766631, 0.758755, 0.582286},
      {0.768896, 0.760969, 0.584865},
      {0.771161, 0.763184, 0.587445},
      {0.773426, 0.765398, 0.590024},
      {0.775691, 0.767613, 0.592604},
      {0.777956, 0.769827, 0.595183},
      {0.780221, 0.772042, 0.597762},
      {0.782486, 0.774256,0.600342},
      {0.784751, 0.776471, 0.602921},
      {0.787016, 0.778685, 0.6055},
      {0.789281, 0.7809, 0.60808},
      {0.791546, 0.783114, 0.610659},
      {0.793811, 0.785328, 0.613239},
      {0.796077, 0.787543, 0.615818},
      {0.798342, 0.789757, 0.618397},
      {0.800607, 0.791972, 0.620977},
      {0.802872, 0.794186, 0.623556},
      {0.805137, 0.796401, 0.626135},
      {0.807402, 0.798615, 0.628715},
      {0.809667, 0.80083, 0.631294},
      {0.811885, 0.803011, 0.633906},
      {0.813634, 0.804862, 0.636837},
      {0.815383, 0.806712, 0.639769},
      {0.817132, 0.808563, 0.6427},
      {0.818881, 0.810413, 0.645632},
      {0.82063, 0.812263, 0.648563},
      {0.822379, 0.814114, 0.651495},
      {0.824128, 0.815964, 0.654426},
      {0.825877, 0.817815, 0.657358},
      {0.827626, 0.819665, 0.660289},
      {0.829375, 0.821516, 0.663221},
      {0.831124, 0.823366, 0.666152},
      {0.832874, 0.825217, 0.669084},
      {0.834623, 0.827067, 0.672016},
      {0.836372, 0.828918, 0.674947},
      {0.838121, 0.830768, 0.677879},
      {0.83987, 0.832618, 0.68081},
      {0.841619, 0.834469, 0.683742},
      {0.843368, 0.836319, 0.686673},
      {0.845117, 0.83817, 0.689605},
      {0.846866, 0.84002, 0.692536},
      {0.848615, 0.841871, 0.695468},
      {0.850364, 0.843721, 0.698399},
      {0.852113, 0.845572, 0.701331},
      {0.853403, 0.846988, 0.704374},
      {0.85459, 0.848308, 0.707441},
      {0.855778, 0.849628, 0.710508},
      {0.856965, 0.850948, 0.713575},
      {0.858153, 0.852268, 0.716642},
      {0.859341, 0.853588, 0.71971},
      {0.860528, 0.854908, 0.722777},
      {0.861716, 0.856228, 0.725844},
      {0.862903, 0.857548, 0.728911},
      {0.864091, 0.858868, 0.731978},
      {0.865278, 0.860188, 0.735045},
      {0.866466, 0.861509, 0.738113},
      {0.867653, 0.862829, 0.74118},
      {0.868841, 0.864149, 0.744247},
      {0.870029, 0.865469, 0.747314},
      {0.871216, 0.866789, 0.750381},
      {0.872404, 0.868109, 0.753449},
      {0.873591, 0.869429, 0.756516},
      {0.874779, 0.870749, 0.759583},
      {0.875966, 0.872069, 0.76265},
      {0.877154, 0.873389, 0.765717},
      {0.878342, 0.874709, 0.768785},
      {0.879529, 0.876029, 0.771852},
      {0.880425, 0.877037, 0.774861},
      {0.881078, 0.877785, 0.777822},
      {0.88173, 0.878533, 0.780783},
      {0.882383, 0.87928, 0.783743},
      {0.883035, 0.880028, 0.786704},
      {0.883688, 0.880776, 0.789665},
      {0.88434, 0.881524, 0.792626},
      {0.884993, 0.882272, 0.795587},
      {0.885645, 0.88302, 0.798547},
      {0.886298, 0.883767, 0.801508},
      {0.886951, 0.884515, 0.804469},
      {0.887603, 0.885263, 0.80743},
      {0.888256, 0.886011, 0.810391},
      {0.888908, 0.886759, 0.813351},
      {0.889561, 0.887507, 0.816312},
      {0.890213, 0.888254, 0.819273},
      {0.890866, 0.889002, 0.822234},
      {0.891519, 0.88975, 0.825195},
      {0.892171, 0.890498, 0.828155},
      {0.892824, 0.891246, 0.831116},
      {0.893476, 0.891993, 0.834077},
      {0.894129, 0.892741, 0.837038},
      {0.894781, 0.893489, 0.839999},
      {0.895312, 0.894103, 0.84283},
      {0.895515, 0.894359, 0.845316},
      {0.895719, 0.894616, 0.847801},
      {0.895923, 0.894872, 0.850287},
      {0.896127, 0.895129, 0.852773},
      {0.896331, 0.895385, 0.855258},
      {0.896535, 0.895641, 0.857744},
      {0.896739, 0.895898, 0.86023},
      {0.896942, 0.896154, 0.862715},
      {0.897146, 0.89641, 0.865201},
      {0.89735, 0.896667, 0.867686},
      {0.897554, 0.896923, 0.870172},
      {0.897758, 0.89718, 0.872658},
      {0.897962, 0.897436, 0.875143},
      {0.898165, 0.897692, 0.877629},
      {0.898369, 0.897949, 0.880115},
      {0.898573, 0.898205, 0.8826},
      {0.898777, 0.898462, 0.885086},
      {0.898981, 0.898718, 0.887572},
      {0.899185, 0.898974, 0.890057},
      {0.899388, 0.899231, 0.892543},
      {0.899592, 0.899487, 0.895029},
      {0.899796, 0.899744, 0.897514},
      {0.9, 0.9, 0.9}};

};

#endif // FLOEVISUALIZATION_H
